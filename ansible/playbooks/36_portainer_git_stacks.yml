---
- name: Create/Update Portainer stacks from Git (dynamic endpointId)
  hosts: all
  become: true
  gather_facts: false

  vars:
    # ==== AJUSTA AQUÍ SEGÚN TU ENTORNO ====
    portainer_base_url: "https://10.20.0.12:9443"

    # Usa API Key (recomendado):
    portainer_use_api_key: true
    portainer_api_token: "{{ lookup('env', 'PORTAINER_TOKEN') | default('', true) }}"

    # Mapeo alias -> nombre real de endpoint
    portainer_endpoint_aliases:
      mon: "local"
      airflow: "airflow-core"
      kafka: "kafka-core"
      spark: "spark-core"
      db: "db-core"

    # Stacks a gestionar
    stacks:
      - name: mon
        endpoint: mon
        repo_url: "git@github.com:infra-trade/infra.git"
        compose_path: "mon/compose/docker-compose.yml"
        git_ref: "main"
        env: []
      - name: airflow
        endpoint: airflow
        repo_url: "git@github.com:infra-trade/infra.git"
        compose_path: "airflow/compose/docker-compose.yml"
        git_ref: "main"
        env: []
      - name: kafka
        endpoint: kafka
        repo_url: "git@github.com:infra-trade/infra.git"
        compose_path: "kafka/compose/docker-compose.yml"
        git_ref: "main"
        env: []
      - name: spark
        endpoint: spark
        repo_url: "git@github.com:infra-trade/infra.git"
        compose_path: "spark/compose/docker-compose.yml"
        git_ref: "main"
        env: []
      - name: db
        endpoint: db
        repo_url: "git@github.com:infra-trade/infra.git"
        compose_path: "db/compose/docker-compose.yml"
        git_ref: "main"
        env: []

  tasks:
    - name: Build effective Portainer URL (avoid self-recursion)
      set_fact:
        portainer_base_url: "{{ portainer_base_url | regex_replace('/+$', '') }}"

    - name: Fail early if token missing
      assert:
        that:
          - portainer_api_token | string | length > 0
        fail_msg: "portainer_api_token vacío. Define un API Key (recomendado) o JWT."

    - name: Check Portainer is reachable
      uri:
        url: "{{ portainer_base_url }}/api/system/status"
        method: GET
        validate_certs: false
        return_content: false
        status_code: 200
      register: _portainer_ping

    - name: Fetch endpoints
      uri:
        url: "{{ portainer_base_url }}/api/endpoints"
        method: GET
        validate_certs: false
        headers: >-
          {{
            ({'X-API-Key': portainer_api_token})
            if (portainer_use_api_key | default(false) | bool)
            else ({'Authorization': 'Bearer ' ~ portainer_api_token})
          }}
        status_code: 200
      register: _endpoints

    - name: Build endpoints list
      set_fact:
        _endpoints_list: "{{ _endpoints.json | default([]) }}"

    - name: Build endpoints_by_name_map (Name -> Id) sin plugins extra
      set_fact:
        _endpoints_by_name_map: "{{ _endpoints_by_name_map | default({}) | combine({item.Name: item.Id}) }}"
      loop: "{{ _endpoints_list }}"

    - name: Load stacks (from group_vars or -e) into stacks_effective
      set_fact:
        stacks_effective: "{{ stacks | default([]) }}"

    - name: Assert stacks are provided
      assert:
        that:
          - stacks_effective | length > 0
        fail_msg: "No se recibieron stacks (var 'stacks' vacía)."

    - name: Show detected endpoints (audit)
      debug:
        var: _endpoints_list

    - name: Resolve endpoint and deploy (per stack)
      include_tasks: "tasks/resolve_portainer_endpoint_and_deploy.yml"
      loop: "{{ stacks_effective }}"
      loop_control:
        loop_var: item
        label: "{{ item.name }}"
      vars:
        endpoints_by_name_map: "{{ _endpoints_by_name_map }}"
        alias_map: "{{ portainer_endpoint_aliases }}"
        portainer_use_api_key_effective: "{{ portainer_use_api_key | default(false) | bool }}"