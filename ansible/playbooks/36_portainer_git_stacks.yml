---
# 36_portainer_git_stacks.yml
# Create/Update Portainer stacks resolving endpointId dynamically by name or numeric id.

- name: Create/Update Portainer stacks from Git (dynamic endpointId)
  hosts: mon-core
  gather_facts: false

  vars:
    # API token: environment var has priority, else var from group_vars
    portainer_api_token: "{{ lookup('env','PORTAINER_TOKEN') | default(portainer_token | default(''), true) }}"
    # Default aliases (you can add/override in group_vars with endpoint_aliases)
    endpoint_aliases_default:
      mon: local

  pre_tasks:
    - name: Assert API token present
      ansible.builtin.assert:
        that:
          - portainer_api_token | length > 0
        fail_msg: "No Portainer API key. Export PORTAINER_TOKEN or set portainer_token in group_vars."

    - name: Assert basic variables
      ansible.builtin.assert:
        that:
          - portainer_url is defined
          - stacks is defined
          - stacks | length > 0
        success_msg: "Basic variables present."

    - name: Portainer connectivity check
      ansible.builtin.uri:
        url: "{{ portainer_url }}/api/system/status"
        method: GET
        headers:
          X-API-Key: "{{ portainer_api_token }}"
        validate_certs: "{{ portainer_validate_certs | default(false) }}"
        return_content: true
        status_code: 200
      register: _status

    - name: Fetch endpoints from Portainer
      ansible.builtin.uri:
        url: "{{ portainer_url }}/api/endpoints?limit=1000"
        method: GET
        headers:
          X-API-Key: "{{ portainer_api_token }}"
        validate_certs: "{{ portainer_validate_certs | default(false) }}"
        return_content: true
        status_code: 200
      register: _endpoints

    - name: Build endpoints maps/lists
      ansible.builtin.set_fact:
        endpoints_map: "{{ dict( (_endpoints.json | map(attribute='Name') | list) | zip(_endpoints.json | map(attribute='Id') | list) ) }}"
        endpoints_names: "{{ _endpoints.json | map(attribute='Name') | list }}"
        endpoints_list: "{{ _endpoints.json | json_query('[].{Id: Id, Name: Name, URL: URL, PublicURL: PublicURL, Type: Type}') }}"
        endpoint_aliases_effective: "{{ endpoint_aliases_default | combine(endpoint_aliases | default({}), recursive=True) }}"

    - name: Show detected endpoints (audit)
      ansible.builtin.debug:
        var: endpoints_list

  tasks:
    - name: Resolve endpoint and deploy stack
      vars:
        _endpoint_raw: "{{ st.endpoint | string }}"
      block:
        # Case 1: numeric endpoint id given
        - name: Use numeric endpoint id if provided
          ansible.builtin.set_fact:
            endpoint_id: "{{ _endpoint_raw | int }}"
            resolved_endpoint_name: "__by_id__"
          when: _endpoint_raw is match('^[0-9]+$')

        # Case 2: exact name match
        - name: Resolve by exact endpoint name
          ansible.builtin.set_fact:
            endpoint_id: "{{ endpoints_map[_endpoint_raw] }}"
            resolved_endpoint_name: "{{ _endpoint_raw }}"
          when:
            - endpoint_id is not defined
            - _endpoint_raw in endpoints_map

        # Case 3: alias map (user-defined or defaults)
        - name: Resolve by alias map
          ansible.builtin.set_fact:
            endpoint_id: "{{ endpoints_map[ endpoint_aliases_effective[_endpoint_raw] ] }}"
            resolved_endpoint_name: "{{ endpoint_aliases_effective[_endpoint_raw] }}"
          when:
            - endpoint_id is not defined
            - _endpoint_raw in endpoint_aliases_effective
            - endpoint_aliases_effective[_endpoint_raw] in endpoints_map

        # Case 4: heuristic suffix "-core"
        - name: Resolve by heuristic suffix "-core"
          ansible.builtin.set_fact:
            endpoint_id: "{{ endpoints_map[_endpoint_raw ~ '-core'] }}"
            resolved_endpoint_name: "{{ _endpoint_raw ~ '-core' }}"
          when:
            - endpoint_id is not defined
            - (_endpoint_raw ~ '-core') in endpoints_map

        # Case 5: specific "mon" -> "local" (safety net)
        - name: Resolve "mon" to "local" if available
          ansible.builtin.set_fact:
            endpoint_id: "{{ endpoints_map['local'] }}"
            resolved_endpoint_name: "local"
          when:
            - endpoint_id is not defined
            - _endpoint_raw == 'mon'
            - 'local' in endpoints_map

        # Final validation
        - name: Fail if endpoint_id was not resolved
          ansible.builtin.fail:
            msg: >-
              Could not resolve endpoint '{{ _endpoint_raw }}'.
              Available endpoints: {{ endpoints_names }}
              Define 'endpoint_aliases' in group_vars or use the exact endpoint name.
          when: endpoint_id is not defined

        # Include the stack task (expects endpoint_id, st, and Portainer vars)
        - name: Include tasks/portainer_stack.yml
          ansible.builtin.include_tasks: "tasks/portainer_stack.yml"
      loop: "{{ stacks }}"
      loop_control:
        loop_var: st