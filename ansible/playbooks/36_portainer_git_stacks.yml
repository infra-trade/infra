---
- name: Create/Update Portainer stacks from Git (dynamic endpointId)
  hosts: mon-core
  gather_facts: false

  vars:
    portainer_validate_certs: false

    endpoint_aliases_default:
      mon: local
      airflow: airflow-core
      kafka: kafka-core
      spark: spark-core
      db: db-core

    # Prioriza PORTAINER_TOKEN del entorno
    portainer_api_token: "{{ lookup('env','PORTAINER_TOKEN') | default(portainer_token | default(''), true) }}"

  pre_tasks:
    - name: Build effective Portainer URL (avoid self-recursion)
      ansible.builtin.set_fact:
        portainer_url_effective: >-
          {{ (portainer_url is defined and (portainer_url|string)|length > 0)
             | ternary(portainer_url,
                       'https://' ~ (hostvars[inventory_hostname].ansible_host | default(inventory_hostname)) ~ ':9443') }}

    - name: Fail early if token missing
      ansible.builtin.assert:
        that: portainer_api_token | length > 0
        fail_msg: "Falta API key. Exporta PORTAINER_TOKEN o define portainer_token en group_vars."

    - name: Check Portainer is reachable
      ansible.builtin.uri:
        url: "{{ portainer_url_effective }}/api/system/status"
        method: GET
        headers:
          X-API-Key: "{{ portainer_api_token }}"
        validate_certs: "{{ portainer_validate_certs }}"
        status_code: 200

    - name: Fetch endpoints
      ansible.builtin.uri:
        url: "{{ portainer_url_effective }}/api/endpoints?limit=1000"
        method: GET
        headers:
          X-API-Key: "{{ portainer_api_token }}"
        validate_certs: "{{ portainer_validate_certs }}"
        status_code: 200
        return_content: true
      register: _endpoints

    - name: Build endpoints maps/lists (use internal var names to avoid collisions)
      ansible.builtin.set_fact:
        __endpoints_by_name: "{{ dict( (_endpoints.json | map(attribute='Name') | list)
                              | zip(_endpoints.json | map(attribute='Id') | list) ) }}"
        endpoints_list: "{{ _endpoints.json | json_query('[].{Id: Id, Name: Name, URL: URL, PublicURL: PublicURL, Type: Type}') }}"
        __alias_map: "{{ endpoint_aliases_default | combine(endpoint_aliases | default({}), recursive=True) }}"

    - name: Load stacks (from group_vars or -e) into stacks_effective
      ansible.builtin.set_fact:
        stacks_effective: "{{ (stacks if (stacks is defined) else []) }}"

    - name: Assert stacks are provided
      ansible.builtin.assert:
        that:
          - stacks_effective | length > 0
        fail_msg: "No se encontró 'stacks'. Define en group_vars/mon-core.yml o pásalas por -e."

    - name: Show detected endpoints (audit)
      ansible.builtin.debug:
        var: endpoints_list

  tasks:
    - name: Resolve endpoint and deploy (per stack)
      ansible.builtin.include_tasks: "tasks/resolve_portainer_endpoint_and_deploy.yml"
      loop: "{{ stacks_effective }}"
      loop_control:
        loop_var: st
      vars:
        # usar nombres distintos para evitar auto-referencias
        p_url: "{{ portainer_url_effective }}"
        p_api_token: "{{ portainer_api_token }}"
        p_validate_certs: "{{ portainer_validate_certs }}"
        endpoints_by_name_map: "{{ __endpoints_by_name }}"
        alias_map: "{{ __alias_map }}"