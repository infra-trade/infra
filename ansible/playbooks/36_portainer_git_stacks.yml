---
- name: Create/Update Portainer stacks from Git (dynamic endpointId)
  hosts: all
  become: true
  gather_facts: false

  vars:
    # === Configuración esperada ===
    # Puedes definir esto en group_vars/all.yml o -e
    # portainer_url: "https://10.20.0.12:9443"
    # portainer_api_key: "ptr_xxx"             # si usas API Key
    # portainer_api_token: "eyJhbGciOi..."      # si usas JWT
    # portainer_use_api_key: true               # true->X-API-Key; false->Bearer
    # stacks:                                   # lista de stacks
    #   - { name: "mon",     endpoint: "mon",     repo_url: "git@github.com:infra-trade/infra.git", compose_path: "mon/compose/docker-compose.yml",     git_ref: "main", env: [] }
    #   - { name: "airflow", endpoint: "airflow", repo_url: "git@github.com:infra-trade/infra.git", compose_path: "airflow/compose/docker-compose.yml", git_ref: "main", env: [] }
    #   - { name: "kafka",   endpoint: "kafka",   repo_url: "git@github.com:infra-trade/infra.git", compose_path: "kafka/compose/docker-compose.yml",   git_ref: "main", env: [] }
    #   - { name: "spark",   endpoint: "spark",   repo_url: "git@github.com:infra-trade/infra.git", compose_path: "spark/compose/docker-compose.yml",   git_ref: "main", env: [] }
    #   - { name: "db",      endpoint: "db",      repo_url: "git@github.com:infra-trade/infra.git", compose_path: "db/compose/docker-compose.yml",      git_ref: "main", env: [] }

    # Permitir alias opcionales definidos por el usuario
    alias_map: {}

  pre_tasks:
    - name: Fail early if token missing
        # No fallamos aquí si el usuario prefiere API Key o JWT;
        # el include hará la validación final con fallback local.
      assert:
        that:
          - (portainer_api_key is defined) or (portainer_api_token is defined)
        fail_msg: "Debes definir 'portainer_api_key' (API Key) o 'portainer_api_token' (JWT)."
      run_once: true

    - name: Check Portainer is reachable (ping GET /api/status)
      uri:
        url: "{{ (portainer_url | default('')) | ternary(portainer_url, 'http://127.0.0.1') }}/api/status"
        method: GET
        validate_certs: false
        return_content: true
        status_code: 200
      register: _status
      run_once: true

    # Obtener endpoints para construir mapas por nombre/Id
    - name: Fetch endpoints
      uri:
        url: "{{ (portainer_url | default('')) | ternary(portainer_url, 'http://127.0.0.1') }}/api/endpoints"
        method: GET
        validate_certs: false
        return_content: true
        status_code: 200
        headers: >-
          {{
            (portainer_use_api_key | default(true))
              | ternary({'X-API-Key': portainer_api_key | default('')},
                        {'Authorization': 'Bearer ' ~ (portainer_api_token | default(''))})
          }}
      register: endpoints_resp
      run_once: true

    - name: Build endpoints maps/lists (use internal var names to avoid collisions)
      set_fact:
        endpoints_list: "{{ (endpoints_resp.json | default([])) | list }}"
        endpoints_by_name_map: >-
          {{
            dict( (endpoints_resp.json | default([]))
                  | map('extract', {'Name':'Name','Id':'Id'})
                  | map('list')
                  | map('reverse')         # [Id, Name] -> [Name, Id]
                  | map('list') )
          }}
      run_once: true

    - name: Load stacks (from group_vars or -e) into stacks_effective
      set_fact:
        stacks_effective: "{{ stacks | default([]) }}"

    - name: Assert stacks are provided
      assert:
        that:
          - stacks_effective is sequence
          - (stacks_effective | length) > 0
        fail_msg: "No se definieron stacks (variable 'stacks')."

    - name: Show detected endpoints (audit)
      debug:
        var: endpoints_list
      run_once: true

  tasks:
    - name: Resolve endpoint and deploy (per stack)
      include_tasks: "tasks/resolve_portainer_endpoint_and_deploy.yml"
      loop: "{{ stacks_effective }}"
      loop_control:
        loop_var: item