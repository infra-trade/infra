---
# =====================================================================
# 30_docker_portainer_all.yml
# - Instala/actualiza Docker Engine y plugin compose en TODOS los hosts
# - Despliega/actualiza Portainer CE en mon-core (HTTPS 9443)
# - Despliega/actualiza Portainer Agent en el resto de nodos
#
# Requiere:
# - group_vars/all.yml con:
#     portainer_image: "portainer/portainer-ce:2.21.5"
#     agent_image:     "portainer/agent:2.21.5"
# =====================================================================

- name: Install/Upgrade Docker Engine (Ubuntu 22.04+) + compose plugin
  hosts: all
  become: true
  gather_facts: true
  collections:
    - community.docker
  vars:
    docker_keyring_path: /etc/apt/keyrings/docker.gpg
  tasks:
    - name: Ensure prereqs (curl, gnupg, lsb-release, ca-certificates)
      ansible.builtin.apt:
        name:
          - curl
          - gnupg
          - lsb-release
          - ca-certificates
        state: present
        update_cache: false

    - name: Remove old docker keys in trusted.gpg.d (cleanup)
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - /etc/apt/trusted.gpg.d/docker.gpg
        - /etc/apt/trusted.gpg.d/docker.asc
        - /etc/apt/trusted.gpg.d/download.docker.com.gpg

    - name: Remove previous docker keyring (if any)
      ansible.builtin.file:
        path: "{{ docker_keyring_path }}"
        state: absent

    - name: Download Docker GPG (ASCII) to tmp
      ansible.builtin.get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /tmp/docker.asc
        mode: "0644"

    - name: Convert Docker GPG to dearmored keyring
      ansible.builtin.command:
        cmd: "gpg --dearmor -o {{ docker_keyring_path }} /tmp/docker.asc"
      args:
        creates: "{{ docker_keyring_path }}"

    - name: Set permissions on keyring
      ansible.builtin.file:
        path: "{{ docker_keyring_path }}"
        mode: "0644"

    - name: Detect Ubuntu codename
      ansible.builtin.command: bash -lc "source /etc/os-release && echo ${VERSION_CODENAME}"
      register: ubuntu_codename
      changed_when: false

    - name: Write Docker apt repo (codename + signed-by)
      ansible.builtin.copy:
        dest: /etc/apt/sources.list.d/docker.list
        mode: "0644"
        content: |
          deb [arch={{ ansible_architecture | default('amd64') }} signed-by={{ docker_keyring_path }}] https://download.docker.com/linux/ubuntu {{ ubuntu_codename.stdout | trim }} stable

    - name: Ensure timesync (helps apt signatures)
      ansible.builtin.package:
        name: systemd-timesyncd
        state: present

    - name: Start & enable timesyncd
      ansible.builtin.service:
        name: systemd-timesyncd
        state: started
        enabled: true

    - name: apt-get update (refresh cache)
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 3600

    - name: Install Docker Engine stack (idempotent)
      ansible.builtin.apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present

    - name: Enable & start docker
      ansible.builtin.service:
        name: docker
        state: started
        enabled: true

    - name: Add 'ansible' to docker group (si existe)
      ansible.builtin.user:
        name: ansible
        groups: docker
        append: true
      when: ansible_facts.getent_passwd is not defined or 'ansible' in ansible_facts.getent_passwd | default({})

    - name: Show docker and compose version
      ansible.builtin.shell: |
        set -e
        docker --version
        docker compose version
      register: docker_versions
      changed_when: false

    - name: Versions output
      ansible.builtin.debug:
        var: docker_versions.stdout_lines

# ---------------------------------------------------------------------

- name: Deploy/Upgrade Portainer Server (CE) on monitor
  hosts: mon-core
  become: true
  gather_facts: false
  collections:
    - community.docker
  vars:
    # No autoreferencias. Si no viene desde group_vars, usamos defaults seguros:
    portainer_image_effective: "{{ portainer_image | default('portainer/portainer-ce:2.21.5') }}"
    portainer_data_volume: portainer_data
  tasks:
    - name: Ensure docker is running
      ansible.builtin.service:
        name: docker
        state: started
        enabled: true

    - name: Ensure Portainer data volume exists
      community.docker.docker_volume:
        name: "{{ portainer_data_volume }}"
        state: present

    - name: Pull pinned Portainer CE image
      community.docker.docker_image:
        name: "{{ portainer_image_effective }}"
        source: pull

    - name: Run/Update Portainer CE container
      community.docker.docker_container:
        name: portainer
        image: "{{ portainer_image_effective }}"
        state: started
        restart_policy: always
        recreate: true
        pull: false
        ports:
          - "8000:8000"     # Edge agent tunnel (opcional)
          - "9443:9443"     # HTTPS UI/API
        volumes:
          - "{{ portainer_data_volume }}:/data"
          - "/var/run/docker.sock:/var/run/docker.sock"
        command: >-
          --ssl
        healthcheck:
          test: ["CMD", "curl", "-kfsS", "https://localhost:9443/api/status"]
          interval: 30s
          timeout: 5s
          retries: 5
          start_period: 30s
        labels:
          io.portainer.description: "Portainer CE - UI de gesti√≥n Docker"
          io.portainer.maintained_by: "ansible"

# ---------------------------------------------------------------------

- name: Deploy/Upgrade Portainer Agent on all agent nodes
  hosts: "all:!mon-core"
  become: true
  gather_facts: false
  collections:
    - community.docker
  vars:
    agent_image_effective: "{{ agent_image | default('portainer/agent:2.21.5') }}"
  tasks:
    - name: Ensure docker is running
      ansible.builtin.service:
        name: docker
        state: started
        enabled: true

    - name: Pull pinned Portainer Agent image
      community.docker.docker_image:
        name: "{{ agent_image_effective }}"
        source: pull

    - name: Run/Update Portainer Agent container
      community.docker.docker_container:
        name: portainer-agent
        image: "{{ agent_image_effective }}"
        state: started
        restart_policy: always
        recreate: true
        pull: false
        ports:
          - "9001:9001"
        env:
          AGENT_CLUSTER_ADDR: "tasks.portainer-agent"
        volumes:
          - "/var/run/docker.sock:/var/run/docker.sock"
          - "/var/lib/docker/volumes:/var/lib/docker/volumes"
        labels:
          io.portainer.agent: "true"