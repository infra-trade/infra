---
# =============================================================================
# Install/Upgrade Docker Engine (Ubuntu 22.04+) + compose plugin
# Deploy/Upgrade Portainer CE (monitor) + Portainer Agent (todos)
#
# Requiere variables en group_vars/all.yml:
#   portainer_image: "portainer/portainer-ce:2.21.5"
#   agent_image:     "portainer/agent:2.21.5"
#
# Notas:
# - La GPG de Docker se descarga una vez en el controlador y se copia a los hosts.
# - Si docker-ce no está disponible (repo no válido o no soportado), se cae a docker.io.
# =============================================================================

- name: Install/Upgrade Docker Engine (Ubuntu 22.04+) + compose plugin
  hosts: airflow-core,kafka-core,spark-core,db-core,mon-core
  become: true
  gather_facts: true

  vars:
    docker_repo_url: "https://download.docker.com/linux/ubuntu"
    docker_key_dst: "/etc/apt/keyrings/docker.gpg"
    docker_repo_file: "/etc/apt/sources.list.d/docker.list"
    # Paquetes oficiales del repo de Docker
    docker_repo_packages:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
      - docker-compose-plugin
    # Fallback desde Ubuntu (sin repo de Docker)
    docker_ubuntu_packages:
      - docker.io
      - docker-compose-plugin

  pre_tasks:
    - name: Ensure prereqs (curl, gnupg, lsb-release, ca-certificates)
      apt:
        name:
          - curl
          - gnupg
          - lsb-release
          - ca-certificates
        state: present
        update_cache: false

    # Limpieza de llaves viejas en cada host
    - name: Remove old docker keys in trusted.gpg.d (cleanup)
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /etc/apt/trusted.gpg.d/docker.gpg
        - /etc/apt/trusted.gpg.d/docker.asc
        - /etc/apt/trusted.gpg.d/download.docker.com.gpg

    # Descargar la GPG en el controlador y distribuir
    - name: Download Docker GPG (ASCII) to controller /tmp
      delegate_to: localhost
      run_once: true
      get_url:
        url: "{{ docker_repo_url }}/gpg"
        dest: "/tmp/docker.asc"
        mode: "0644"
        validate_certs: true
      register: docker_gpg_ctrl

    - name: Ensure /etc/apt/keyrings exists
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: "0755"

    - name: Copy docker.asc to remote tmp
      copy:
        src: "/tmp/docker.asc"
        dest: "/tmp/docker.asc"
        mode: "0644"

    - name: Remove previous docker keyring (if any)
      file:
        path: "{{ docker_key_dst }}"
        state: absent

    - name: Convert Docker GPG to dearmored keyring
      shell: |
        gpg --dearmor < /tmp/docker.asc > "{{ docker_key_dst }}"
      args:
        creates: "{{ docker_key_dst }}"

    - name: Set permissions on keyring
      file:
        path: "{{ docker_key_dst }}"
        mode: "0644"

    - name: Detect Ubuntu codename
      set_fact:
        ubuntu_codename: "{{ ansible_facts.lsb.codename | default('jammy') }}"
        arch_deb: "{{ ansible_facts.architecture | default('amd64') }}"

    - name: Write Docker apt repo (codename + signed-by)
      copy:
        dest: "{{ docker_repo_file }}"
        mode: "0644"
        content: |
          deb [arch={{ arch_deb }} signed-by={{ docker_key_dst }}] {{ docker_repo_url }} {{ ubuntu_codename }} stable

    - name: Ensure timesync (helps apt signatures)
      package:
        name: systemd-timesyncd
        state: present

    - name: Start & enable timesyncd
      systemd:
        name: systemd-timesyncd
        state: started
        enabled: true

    - name: apt-get update (refresh cache)
      apt:
        update_cache: true

  tasks:
    # Intento principal: instalar docker desde el repo de Docker
    - name: Check if docker-ce candidate exists
      shell: |
        set -o pipefail
        apt-cache policy docker-ce | awk '/Candidate:/ {print $2}'
      args:
        executable: /bin/bash
      register: docker_ce_candidate
      changed_when: false

    - name: Install Docker Engine stack (Docker repo) if candidate available
      apt:
        name: "{{ docker_repo_packages }}"
        state: present
      when:
        - docker_ce_candidate.stdout is defined
        - docker_ce_candidate.stdout != "(none)"

    # Fallback si el repo de Docker no tiene paquetes (o arquitectura/codename no soportado)
    - name: Install Docker (Ubuntu fallback) if docker-ce not available
      apt:
        name: "{{ docker_ubuntu_packages }}"
        state: present
        update_cache: true
      when:
        - docker_ce_candidate.stdout is not defined
          or docker_ce_candidate.stdout == "(none)"

    - name: Enable & start docker
      systemd:
        name: docker
        state: started
        enabled: true
        daemon_reload: true

    - name: Add 'ansible' to docker group (si existe)
      user:
        name: ansible
        groups: docker
        append: true
      ignore_errors: true

    - name: Show docker and compose version
      shell: |
        set -e
        docker --version
        docker compose version
      register: docker_versions
      changed_when: false
      failed_when: false

    - name: Versions output
      debug:
        var: docker_versions.stdout_lines

# =============================================================================

- name: Deploy/Upgrade Portainer Server (CE) on monitor
  hosts: mon-core
  become: true
  gather_facts: false

  vars:
    portainer_data: "portainer_data"
    portainer_http_port: 9000
    portainer_https_port: 9443

  tasks:
    - name: Ensure docker is running
      systemd:
        name: docker
        state: started
        enabled: true

    - name: Ensure Portainer data volume exists
      community.docker.docker_volume:
        name: "{{ portainer_data }}"
        state: present

    - name: Pull pinned Portainer CE image
      community.docker.docker_image:
        name: "{{ portainer_image }}"
        source: pull

    - name: Run/Update Portainer CE container
      community.docker.docker_container:
        name: portainer
        image: "{{ portainer_image }}"
        restart_policy: always
        state: started
        recreate: true
        ports:
          - "{{ portainer_http_port }}:9000"
          - "{{ portainer_https_port }}:9443"
        volumes:
          - "/var/run/docker.sock:/var/run/docker.sock"
          - "{{ portainer_data }}:/data"

# =============================================================================

- name: Deploy/Upgrade Portainer Agent on all agent nodes
  hosts: airflow-core,kafka-core,spark-core,db-core
  become: true
  gather_facts: false

  vars:
    agent_port: 9001

  tasks:
    - name: Ensure docker is running
      systemd:
        name: docker
        state: started
        enabled: true

    - name: Pull pinned Portainer Agent image
      community.docker.docker_image:
        name: "{{ agent_image }}"
        source: pull

    # Intento de arrancar publicado. Si el puerto está ocupado, intenta sin publicar (bridge)
    - name: Run/Update Portainer Agent container (try with published port)
      community.docker.docker_container:
        name: portainer-agent
        image: "{{ agent_image }}"
        restart_policy: always
        state: started
        recreate: true
        ports:
          - "{{ agent_port }}:9001"
        env:
          AGENT_CLUSTER_ADDR: tasks.agent
          LOG_LEVEL: INFO
        volumes:
          - "/var/run/docker.sock:/var/run/docker.sock"
          - "/var/lib/docker/volumes:/var/lib/docker/volumes"
      register: agent_with_port
      failed_when: false

    - name: Remove failed container (if any) before fallback
      community.docker.docker_container:
        name: portainer-agent
        state: absent
      when: agent_with_port.failed | default(false)

    - name: Run/Update Portainer Agent container (fallback without published port)
      community.docker.docker_container:
        name: portainer-agent
        image: "{{ agent_image }}"
        restart_policy: always
        state: started
        recreate: true
        env:
          AGENT_CLUSTER_ADDR: tasks.agent
          LOG_LEVEL: INFO
        volumes:
          - "/var/run/docker.sock:/var/run/docker.sock"
          - "/var/lib/docker/volumes:/var/lib/docker/volumes"
      when: agent_with_port.failed | default(false)