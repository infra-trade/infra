---
- name: Create/Update core VMs (root grow + data disk /data, vmbr1/VLAN20, thin)
  hosts: localhost
  gather_facts: false

  collections:
    - community.proxmox

  vars:
    # Proxmox API
    pm_api_host: "192.168.100.100"
    pm_api_user: "ansible@pve"
    pm_api_token_id: "api"
    pm_api_token_secret: "{{ lookup('env','PM_API_TOKEN_SECRET') }}"
    pm_node: "pve1"
    validate_certs: false

    # Template (debe ser TEMPLATE)
    template_name: "ubuntu-22.04-cloudinit"

    # Storage
    storage_system: "local-lvm"    # root/data disks
    snippets_store: "local"        # storage con 'snippets' habilitado

    # Red / VLAN
    net_bridge: "vmbr1"
    vlan_tag: 20
    vlan_gateway: "10.20.0.254"
    dns_servers: ["1.1.1.1","8.8.8.8"]

    # Acceso
    ci_user: "ansible"
    ci_password: ""                      # vacío => solo clave
    ssh_pubkey_path: "{{ lookup('env','HOME') ~ '/.ssh/id_ed25519.pub' }}"
    ssh_wait_timeout: 420

    # Snippet user-data (archivo que se sube a /var/lib/vz/snippets/)
    snippet_name: "user-data-core.yml"

    # Catálogo de VMs
    vms:
      airflow-core: { vmid: 9301, cpu: 12, mem: 32768, disk_gb: 120, ip: "10.20.0.10/24",  data_disk_gb: 100 }
      kafka-core:   { vmid: 9302, cpu: 6,  mem: 24576, disk_gb: 160, ip: "10.20.0.22/24",  data_disk_gb: 300 }
      spark-core:   { vmid: 9303, cpu: 12, mem: 32768, disk_gb: 160, ip: "10.20.0.23/24",  data_disk_gb: 200 }
      db-core:      { vmid: 9304, cpu: 6,  mem: 16384, disk_gb: 100, ip: "10.20.0.21/24",  data_disk_gb: 400 }
      mon-core:     { vmid: 9305, cpu: 4,  mem: 12288, disk_gb: 120, ip: "10.20.0.12/24",  data_disk_gb: 200 }

  pre_tasks:
    - name: Verificar que exista la llave pública local
      stat:
        path: "{{ ssh_pubkey_path }}"
      register: sshkey_stat

    - name: Fallar si no existe la llave pública
      assert:
        that: sshkey_stat.stat.exists
        success_msg: "Llave pública encontrada"
        fail_msg: "No existe {{ ssh_pubkey_path }}"

    - name: Cargar SSH pubkey (texto)
      slurp:
        src: "{{ ssh_pubkey_path }}"
      register: sshkey_raw

    - name: Preparar facts comunes
      set_fact:
        ssh_pubkey_string: "{{ (sshkey_raw.content | b64decode) | trim }}"
        dns_string: "{{ dns_servers | join(' ') }}"
        vmlist: "{{ vms | dict2items }}"
        # rutas remotas en Proxmox
        remote_snippets_dir: "/var/lib/vz/snippets"
        remote_snippet_userdata: "/var/lib/vz/snippets/{{ snippet_name }}"

    - name: Asegurar carpeta de snippets en Proxmox
      file:
        path: "{{ remote_snippets_dir }}"
        state: directory
        owner: root
        group: root
        mode: "0755"
      delegate_to: "{{ pm_api_host }}"
      become: true

    - name: Subir user-data con la llave inyectada a Proxmox
      copy:
        dest: "{{ remote_snippet_userdata }}"
        mode: "0644"
        content: |
          #cloud-config
          users:
            - name: {{ ci_user }}
              gecos: Ansible User
              groups: sudo
              shell: /bin/bash
              sudo: ALL=(ALL) NOPASSWD:ALL
              ssh_authorized_keys:
                - {{ ssh_pubkey_string }}

          # Deshabilitar password SSH
          ssh_pwauth: false
          disable_root: true
          chpasswd:
            expire: false

          preserve_hostname: false
          manage_etc_hosts: true

          # No tocar paquetes aquí, lo haremos con Ansible
          package_update: false
          package_upgrade: false

          # Ampliar root (mejor con growpart+resize2fs al vuelo)
          runcmd:
            - |
              set -eux
              which growpart >/dev/null 2>&1 || (apt-get update || true; apt-get install -y cloud-guest-utils || true)
              growpart /dev/sda 2 || true
              resize2fs /dev/sda2 || true || (xfs_growfs / || true)

              # Preparar /data en segundo disco si existe /dev/sdb
              if lsblk -no NAME | grep -q '^sdb$'; then
                if ! blkid -L DATA >/dev/null 2>&1; then
                  mkfs.ext4 -F -L DATA /dev/sdb || true
                fi
                mkdir -p /data
                if ! grep -q '^LABEL=DATA ' /etc/fstab; then
                  echo 'LABEL=DATA /data ext4 defaults,nofail 0 2' >> /etc/fstab
                fi
                mount -a || true
              fi
      delegate_to: "{{ pm_api_host }}"
      become: true

  tasks:
    - name: Procesar cada VM
      include_tasks: "tasks/core_vm_network_first.yml"
      loop: "{{ vmlist }}"
      loop_control:
        loop_var: vm_item