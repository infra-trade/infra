---
- name: Create/Update core VMs per catalog (clone, cpu/ram, net, resize root/data, growfs & housekeeping)
  hosts: localhost
  gather_facts: false

  collections:
    - community.proxmox

  vars:
    # ===== Proxmox API / SSH =====
    pm_api_host: "192.168.100.100"
    pm_api_user: "ansible@pve"
    pm_api_token_id: "api"
    pm_api_token_secret: "{{ lookup('env','PM_API_TOKEN_SECRET') }}"
    pm_node: "pve1"
    validate_certs: false
    pve_ssh_host: "192.168.100.100"    # host para delegate_to en tareas qm/archivo .conf

    # ===== Template y storages =====
    template_name: "ubuntu-22.04-cloudinit"     # marcado como template
    storage_system: "local-lvm"                  # LVM-thin
    snippets_store: "local"                      # con snippets habilitado

    # ===== Red / VLAN =====
    net_bridge: "vmbr1"
    vlan_tag: 20
    vlan_gateway: "10.20.0.254"
    dns_servers: ["1.1.1.1","8.8.8.8"]

    # ===== Acceso guest =====
    ci_user: "ansible"          # usuario creado por tu user-data
    ssh_wait_timeout: 420

    # ===== Cloud-init user-data ya existente en /var/lib/vz/snippets/ =====
    snippet_name: "user-data-core.yml"

    # ===== Umbral de espacio mínimo (para limpieza ligera previa a growfs) =====
    min_free_mb: 300

    # ===== Catálogo de VMs =====
    vms:
      airflow-core: { vmid: 9301, cpu: 12, mem: 32768, disk_gb: 120, ip: "10.20.0.10/24",  data_disk_gb: 100 }
      kafka-core:   { vmid: 9302, cpu: 6,  mem: 24576, disk_gb: 160, ip: "10.20.0.22/24",  data_disk_gb: 300 }
      spark-core:   { vmid: 9303, cpu: 12, mem: 32768, disk_gb: 160, ip: "10.20.0.23/24",  data_disk_gb: 200 }
      db-core:      { vmid: 9304, cpu: 6,  mem: 16384, disk_gb: 100, ip: "10.20.0.21/24",  data_disk_gb: 400 }
      mon-core:     { vmid: 9305, cpu: 4,  mem: 12288, disk_gb: 120, ip: "10.20.0.12/24",  data_disk_gb: 200 }

  pre_tasks:
    - name: Preparar facts comunes
      set_fact:
        vmlist: "{{ vms | dict2items }}"
        dns_string: "{{ dns_servers | join(' ') }}"

    - name: Asegurar carpeta de snippets en Proxmox
      file:
        path: "/var/lib/vz/snippets"
        state: directory
        mode: "0755"
      delegate_to: "{{ pve_ssh_host }}"
      become: true

  tasks:
    - name: Procesar cada VM del catálogo
      block:

        # ---------- CLONE ----------
        # (Si quieres conservar VMs existentes, comenta las dos tareas de "absent")
        - name: Eliminar VM previa (best-effort)
          community.proxmox.proxmox_kvm:
            api_host: "{{ pm_api_host }}"
            api_user: "{{ pm_api_user }}"
            api_token_id: "{{ pm_api_token_id }}"
            api_token_secret: "{{ pm_api_token_secret }}"
            validate_certs: "{{ validate_certs }}"
            node: "{{ pm_node }}"
            vmid: "{{ item.value.vmid }}"
            state: absent
            purge: true
            force: true
          failed_when: false

        - name: Clonar desde template
          community.proxmox.proxmox_kvm:
            api_host: "{{ pm_api_host }}"
            api_user: "{{ pm_api_user }}"
            api_token_id: "{{ pm_api_token_id }}"
            api_token_secret: "{{ pm_api_token_secret }}"
            validate_certs: "{{ validate_certs }}"
            node: "{{ pm_node }}"
            name: "{{ item.key }}"
            newid: "{{ item.value.vmid }}"
            clone: "{{ template_name }}"
            full: true
            storage: "{{ storage_system }}"
            scsihw: virtio-scsi-pci
            state: present
            timeout: 240

        # ---------- CPU / RAM ----------
        - name: Ajustar CPU/RAM del catálogo (update explícito)
          community.proxmox.proxmox_kvm:
            api_host: "{{ pm_api_host }}"
            api_user: "{{ pm_api_user }}"
            api_token_id: "{{ pm_api_token_id }}"
            api_token_secret: "{{ pm_api_token_secret }}"
            validate_certs: "{{ validate_certs }}"
            node: "{{ pm_node }}"
            vmid: "{{ item.value.vmid }}"
            update: true
            memory: "{{ item.value.mem }}"
            cores: "{{ item.value.cpu }}"
            sockets: 1
            vga: serial0
            serial:
              serial0: socket
            scsihw: virtio-scsi-pci
            agent: 1
            onboot: true
            timeout: 240

        # ---------- cloud-init + red ----------
        - name: Subir meta-data (hostname)
          copy:
            dest: "/var/lib/vz/snippets/meta-{{ item.key }}.yml"
            mode: "0644"
            content: |
              instance-id: {{ item.value.vmid }}
              local-hostname: {{ item.key }}
          delegate_to: "{{ pve_ssh_host }}"
          become: true

        - name: Configurar cloud-init, IP, gateway, DNS y bridge/VLAN
          community.proxmox.proxmox_kvm:
            api_host: "{{ pm_api_host }}"
            api_user: "{{ pm_api_user }}"
            api_token_id: "{{ pm_api_token_id }}"
            api_token_secret: "{{ pm_api_token_secret }}"
            validate_certs: "{{ validate_certs }}"
            node: "{{ pm_node }}"
            vmid: "{{ item.value.vmid }}"
            update: true
            ide:
              ide2: "{{ storage_system }}:cloudinit"
            citype: "nocloud"
            cicustom: "user={{ snippets_store }}:snippets/{{ snippet_name }},meta={{ snippets_store }}:snippets/meta-{{ item.key }}.yml"
            ipconfig:
              ipconfig0: "ip={{ item.value.ip }},gw={{ vlan_gateway }}"
            nameservers: "{{ dns_string }}"
            net:
              net0: "virtio,bridge={{ net_bridge }},tag={{ vlan_tag }}"
            timeout: 240

        # ---------- Disco raíz: detectar bus y resize al tamaño del catálogo ----------
        - name: Detectar bus del disco raíz (scsi0/virtio0/sata0/ide0)
          delegate_to: "{{ pve_ssh_host }}"
          become: true
          shell: |
            set -e
            conf="/etc/pve/qemu-server/{{ item.value.vmid }}.conf"
            awk -F: '/^(scsi0|virtio0|sata0|ide0):/ {print $1; exit}' "$conf"
          args: { executable: /bin/bash }
          register: root_bus

        - name: Leer tamaño actual del disco raíz (GB)
          delegate_to: "{{ pve_ssh_host }}"
          become: true
          shell: |
            set -e
            conf="/etc/pve/qemu-server/{{ item.value.vmid }}.conf"
            line="$(awk -F: '/^{{ root_bus.stdout | regex_escape }}:/ {print $2; exit}' "$conf")"
            size="$(echo "$line" | sed -n 's/.*size=\([0-9]\+\)G.*/\1/p')"
            echo "${size:-0}"
          args: { executable: /bin/bash }
          register: current_size_gb

        - name: Calcular delta de crecimiento (GB)
          set_fact:
            desired_size_gb: "{{ item.value.disk_gb | int }}"
            current_size_int: "{{ (current_size_gb.stdout | default('0')) | int }}"
            grow_delta_gb: "{{ (item.value.disk_gb | int) - ((current_size_gb.stdout | default('0')) | int) }}"

        - name: Redimensionar disco raíz con qm resize (+ΔG si falta)
          delegate_to: "{{ pve_ssh_host }}"
          become: true
          command: >
            qm resize {{ item.value.vmid }} {{ root_bus.stdout }} +{{ grow_delta_gb }}G
          when:
            - root_bus.stdout | length > 0
            - grow_delta_gb | int > 0

        # ---------- Disco de datos /data ----------
        - name: Verificar existencia de scsi1
          delegate_to: "{{ pve_ssh_host }}"
          become: true
          shell: |
            conf="/etc/pve/qemu-server/{{ item.value.vmid }}.conf"
            awk -F: '/^scsi1:/ {print $0; exit}' "$conf" || true
          args: { executable: /bin/bash }
          register: scsi1_line
          when: item.value.data_disk_gb is defined

        - name: Crear scsi1 si no existe
          delegate_to: "{{ pve_ssh_host }}"
          become: true
          command: >
            qm set {{ item.value.vmid }} --scsi1 {{ storage_system }}:{{ item.value.data_disk_gb }}
          when:
            - item.value.data_disk_gb is defined
            - scsi1_line.stdout | length == 0

        - name: Si existe scsi1 y es menor, crecerlo
          delegate_to: "{{ pve_ssh_host }}"
          become: true
          shell: |
            conf="/etc/pve/qemu-server/{{ item.value.vmid }}.conf"
            line="$(awk -F: '/^scsi1:/ {print $2; exit}' "$conf")"
            cur="$(echo "$line" | sed -n 's/.*size=\([0-9]\+\)G.*/\1/p')"
            des={{ item.value.data_disk_gb | int }}
            if [ -n "$cur" ] && [ "$cur" -lt "$des" ]; then
              delta=$((des - cur))
              qm resize {{ item.value.vmid }} scsi1 +${delta}G
            fi
          args: { executable: /bin/bash }
          when:
            - item.value.data_disk_gb is defined
            - scsi1_line.stdout | length > 0

        # ---------- Power on & espera SSH ----------
        - name: Arrancar VM
          community.proxmox.proxmox_kvm:
            api_host: "{{ pm_api_host }}"
            api_user: "{{ pm_api_user }}"
            api_token_id: "{{ pm_api_token_id }}"
            api_token_secret: "{{ pm_api_token_secret }}"
            validate_certs: "{{ validate_certs }}"
            node: "{{ pm_node }}"
            vmid: "{{ item.value.vmid }}"
            state: started
            timeout: 240

        - name: Esperar a que SSH responda
          wait_for:
            host: "{{ (item.value.ip | string).split('/')[0] }}"
            port: 22
            delay: 5
            timeout: "{{ ssh_wait_timeout }}"

        # ---------- Dentro del guest: limpieza mínima + grow root (LVM / no-LVM) + /data ----------
        - name: MB libres iniciales en /
          raw: "df -Pm / | awk 'NR==2{print $4}'"
          register: free0
          delegate_to: "{{ (item.value.ip | string).split('/')[0] }}"
          become: true

        - name: Si hay poco espacio, hacer limpieza ligera
          block:
            - raw: |
                systemctl stop docker 2>/dev/null || true
                systemctl stop containerd 2>/dev/null || true
              changed_when: false
            - raw: |
                rm -f /var/lib/dpkg/lock-frontend /var/lib/dpkg/lock /var/cache/apt/archives/lock
                rm -rf /var/lib/apt/lists/*
                apt-get clean || true
              changed_when: false
            - raw: |
                journalctl --vacuum-time=1d 2>/dev/null || true
                find /var/log -type f -size +10M -exec truncate -s 0 {} \; 2>/dev/null || true
                rm -rf /tmp/* /var/tmp/* 2>/dev/null || true
              changed_when: false
            - raw: "dpkg --configure -a || true"
              changed_when: false
          when: (free0.stdout | default('0') | int) < min_free_mb
          delegate_to: "{{ (item.value.ip | string).split('/')[0] }}"
          become: true

        - name: Detectar dispositivo y fs de /
          raw: "findmnt -no SOURCE,FSTYPE /"
          register: root_info
          delegate_to: "{{ (item.value.ip | string).split('/')[0] }}"
          become: true

        - name: Normalizar variables de raíz
          set_fact:
            ROOT_SOURCE: "{{ (root_info.stdout | trim).split(' ')[0] }}"
            ROOT_FSTYPE: "{{ (root_info.stdout | trim).split(' ')[1] | lower }}"

        # ---- Rama LVM ----
        - block:
            - raw: "pvs --noheadings -o pv_name | awk 'NF{print $1; exit}'"
              register: pv_dev
              changed_when: false
            - raw: "pvresize {{ pv_dev.stdout | trim }}"
              when: pv_dev.stdout is search('^/dev/')
            - raw: "df -PTh | awk '$7==\"/\"{print $1}'"
              register: lv_path
              changed_when: false
            - raw: "lvextend -r -l +100%FREE {{ lv_path.stdout | trim }}"
              when: lv_path.stdout is search('^/dev/')
          when: ROOT_SOURCE is match('^/dev/mapper/')
          delegate_to: "{{ (item.value.ip | string).split('/')[0] }}"
          become: true

        # ---- Rama NO-LVM (partición directa) ----
        - block:
            - set_fact:
                PART_PATH: "{{ ROOT_SOURCE }}"
                DISK_PATH: "{{ ROOT_SOURCE | regex_replace('[0-9]+$','') }}"
                PART_NUM:  "{{ ROOT_SOURCE | regex_search('[0-9]+$') }}"
            - raw: |
                command -v growpart >/dev/null 2>&1 || (apt-get update -o Acquire::ForceIPv4=true && DEBIAN_FRONTEND=noninteractive apt-get install -y cloud-guest-utils)
                growpart {{ DISK_PATH }} {{ PART_NUM }}
            - raw: "blkid -o value -s TYPE {{ PART_PATH }}"
              register: fstype_now
              changed_when: false
            - raw: "resize2fs {{ PART_PATH }}"
              when: (fstype_now.stdout | trim | lower) == "ext4"
            - raw: "xfs_growfs /"
              when: (fstype_now.stdout | trim | lower) == "xfs"
          when: ROOT_SOURCE is match('^/dev/[sv]d[a-z]*[0-9]+|^/dev/nvme[0-9]+n[0-9]+p[0-9]+')
          delegate_to: "{{ (item.value.ip | string).split('/')[0] }}"
          become: true

        # ---- /data (sdb) dentro del guest ----
        - name: Formatear y montar /data si existe /dev/sdb
          raw: |
            if lsblk -no NAME | grep -q '^sdb$'; then
              blkid -L DATA >/dev/null 2>&1 || mkfs.ext4 -F -L DATA /dev/sdb
              mkdir -p /data
              grep -q '^LABEL=DATA ' /etc/fstab || echo 'LABEL=DATA /data ext4 defaults,nofail 0 2' >> /etc/fstab
              mount -a
            fi
          delegate_to: "{{ (item.value.ip | string).split('/')[0] }}"
          become: true
          changed_when: false

      loop: "{{ vmlist }}"
      loop_control:
        label: "{{ item.key }}"