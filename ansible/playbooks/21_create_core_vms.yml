---
- name: Create/Update core VMs per catalog (clone, cpu/ram, net, resize root/data, growfs)
  hosts: localhost
  gather_facts: false
  collections:
    - community.proxmox

  vars:
    # ===== Proxmox API / SSH =====
    pm_api_host: "192.168.100.100"
    pm_api_user: "ansible@pve"
    pm_api_token_id: "api"
    pm_api_token_secret: "{{ lookup('env','PM_API_TOKEN_SECRET') }}"
    pm_node: "pve1"
    validate_certs: false

    pve_ssh_host: "192.168.100.100" # host para delegate_to

    # ===== Template y storages =====
    template_name: "ubuntu-22.04-cloudinit"  # marcado como template
    storage_system: "local-lvm"              # LVM-thin
    snippets_store: "local"                  # con snippets habilitado

    # ===== Red / VLAN =====
    net_bridge: "vmbr1"
    vlan_tag: 20
    vlan_gateway: "10.20.0.254"
    dns_servers: ["1.1.1.1","8.8.8.8"]

    # ===== Acceso guest =====
    ci_user: "ansible"       # usuario creado por tu user-data
    ssh_wait_timeout: 420

    # ===== Cloud-init user-data ya existente =====
    snippet_name: "user-data-core.yml"

    # ===== Limpieza mínima dentro del guest si / tiene poco espacio =====
    min_free_mb: 300

    # ===== Catálogo de VMs =====
    vms:
      airflow-core: { vmid: 9301, cpu: 12, mem: 32768, disk_gb: 120, ip: "10.20.0.10/24", data_disk_gb: 100 }
      kafka-core:   { vmid: 9302, cpu: 6,  mem: 24576, disk_gb: 160, ip: "10.20.0.22/24", data_disk_gb: 300 }
      spark-core:   { vmid: 9303, cpu: 12, mem: 32768, disk_gb: 160, ip: "10.20.0.23/24", data_disk_gb: 200 }
      db-core:      { vmid: 9304, cpu: 6,  mem: 16384, disk_gb: 100, ip: "10.20.0.21/24", data_disk_gb: 400 }
      mon-core:     { vmid: 9305, cpu: 4,  mem: 12288, disk_gb: 120, ip: "10.20.0.12/24", data_disk_gb: 200 }

  pre_tasks:
    - name: Preparar facts comunes
      set_fact:
        vmlist: "{{ vms | dict2items }}"
        dns_string: "{{ dns_servers | join(' ') }}"

    - name: Asegurar carpeta de snippets en Proxmox
      file:
        path: "/var/lib/vz/snippets"
        state: directory
        mode: "0755"
      delegate_to: "{{ pve_ssh_host }}"
      become: true

  tasks:
    # --- (Opcional) eliminar VMs existentes ---
    - name: Eliminar VM previa (best-effort)
      community.proxmox.proxmox_kvm:
        api_host: "{{ pm_api_host }}"
        api_user: "{{ pm_api_user }}"
        api_token_id: "{{ pm_api_token_id }}"
        api_token_secret: "{{ pm_api_token_secret }}"
        validate_certs: "{{ validate_certs }}"
        node: "{{ pm_node }}"
        vmid: "{{ item.value.vmid }}"
        state: absent
        purge: true
        force: true
      failed_when: false
      loop: "{{ vmlist }}"
      loop_control: { label: "{{ item.key }}" }

    # --- Clonado ---
    - name: Clonar desde template
      community.proxmox.proxmox_kvm:
        api_host: "{{ pm_api_host }}"
        api_user: "{{ pm_api_user }}"
        api_token_id: "{{ pm_api_token_id }}"
        api_token_secret: "{{ pm_api_token_secret }}"
        validate_certs: "{{ validate_certs }}"
        node: "{{ pm_node }}"
        name: "{{ item.key }}"
        newid: "{{ item.value.vmid }}"
        clone: "{{ template_name }}"
        full: true
        storage: "{{ storage_system }}"
        scsihw: virtio-scsi-pci
        state: present
        timeout: 240
      loop: "{{ vmlist }}"
      loop_control: { label: "{{ item.key }}" }

    # --- CPU/RAM (update explícito) ---
    - name: Ajustar CPU/RAM del catálogo
      community.proxmox.proxmox_kvm:
        api_host: "{{ pm_api_host }}"
        api_user: "{{ pm_api_user }}"
        api_token_id: "{{ pm_api_token_id }}"
        api_token_secret: "{{ pm_api_token_secret }}"
        validate_certs: "{{ validate_certs }}"
        node: "{{ pm_node }}"
        vmid: "{{ item.value.vmid }}"
        update: true
        memory: "{{ item.value.mem }}"
        cores: "{{ item.value.cpu }}"
        sockets: 1
        vga: serial0
        serial:
          serial0: socket
        scsihw: virtio-scsi-pci
        agent: 1
        onboot: true
        timeout: 240
      loop: "{{ vmlist }}"
      loop_control: { label: "{{ item.key }}" }

    # --- cloud-init + red ---
    - name: Subir meta-data (hostname)
      copy:
        dest: "/var/lib/vz/snippets/meta-{{ item.key }}.yml"
        mode: "0644"
        content: |
          instance-id: {{ item.value.vmid }}
          local-hostname: {{ item.key }}
      delegate_to: "{{ pve_ssh_host }}"
      become: true
      loop: "{{ vmlist }}"
      loop_control: { label: "{{ item.key }}" }

    - name: Configurar cloud-init, IP, gateway, DNS y bridge/VLAN
      community.proxmox.proxmox_kvm:
        api_host: "{{ pm_api_host }}"
        api_user: "{{ pm_api_user }}"
        api_token_id: "{{ pm_api_token_id }}"
        api_token_secret: "{{ pm_api_token_secret }}"
        validate_certs: "{{ validate_certs }}"
        node: "{{ pm_node }}"
        vmid: "{{ item.value.vmid }}"
        update: true
        ide:
          ide2: "{{ storage_system }}:cloudinit"
        citype: "nocloud"
        cicustom: "user={{ snippets_store }}:snippets/{{ snippet_name }},meta={{ snippets_store }}:snippets/meta-{{ item.key }}.yml"
        ipconfig:
          ipconfig0: "ip={{ item.value.ip }},gw={{ vlan_gateway }}"
        nameservers: "{{ dns_string }}"
        net:
          net0: "virtio,bridge={{ net_bridge }},tag={{ vlan_tag }}"
        timeout: 240
      loop: "{{ vmlist }}"
      loop_control: { label: "{{ item.key }}" }

    # --- Disco raíz: detectar bus y resize al tamaño del catálogo (todo en una tarea por VM) ---
    - name: Ajustar tamaño de disco raíz al catálogo (detecta bus y hace qm resize si falta)
      delegate_to: "{{ pve_ssh_host }}"
      become: true
      shell: |
        set -e
        VMID="{{ item.value.vmid }}"
        DES="{{ item.value.disk_gb | int }}"  # tamaño deseado en GB
        CONF="/etc/pve/qemu-server/${VMID}.conf"

        # Detectar bus raíz: scsi0/virtio0/sata0/ide0
        BUS="$(awk -F: '/^(scsi0|virtio0|sata0|ide0):/ {print $1; exit}' "$CONF")"
        [ -z "$BUS" ] && { echo "No se detectó bus raíz en $CONF"; exit 1; }

        # Tamaño actual (GB)
        LINE="$(awk -F: -v b="$BUS" '$1==b{print $2; exit}' "$CONF")"
        CUR="$(echo "$LINE" | sed -n 's/.*size=\([0-9]\+\)G.*/\1/p')"
        CUR="${CUR:-0}"

        if [ "$DES" -gt "$CUR" ]; then
          DELTA=$((DES - CUR))
          echo "VM $VMID: $BUS crece de ${CUR}G a ${DES}G (+${DELTA}G)"
          qm resize "$VMID" "$BUS" +${DELTA}G
        else
          echo "VM $VMID: tamaño actual ${CUR}G >= deseado ${DES}G, no cambio."
        fi
      args: { executable: /bin/bash }
      loop: "{{ vmlist }}"
      loop_control: { label: "{{ item.key }}" }

    # --- Disco de datos /data: crear o crecer si es menor ---
    - name: Crear/ajustar scsi1 para /data según catálogo
      delegate_to: "{{ pve_ssh_host }}"
      become: true
      shell: |
        set -e
        VMID="{{ item.value.vmid }}"
        DES="{{ item.value.data_disk_gb | default(0) | int }}"
        [ "$DES" -le 0 ] && { echo "Sin data_disk_gb para $VMID, omito."; exit 0; }

        CONF="/etc/pve/qemu-server/${VMID}.conf"
        LINE="$(awk -F: '/^scsi1:/{print $2; exit}' "$CONF")"

        if [ -z "$LINE" ]; then
          echo "VM $VMID: creando scsi1 de ${DES}G"
          qm set "$VMID" --scsi1 "{{ storage_system }}:${DES}"
          exit 0
        fi

        CUR="$(echo "$LINE" | sed -n 's/.*size=\([0-9]\+\)G.*/\1/p')"
        CUR="${CUR:-0}"

        if [ "$DES" -gt "$CUR" ]; then
          DELTA=$((DES - CUR))
          echo "VM $VMID: scsi1 crece de ${CUR}G a ${DES}G (+${DELTA}G)"
          qm resize "$VMID" scsi1 +${DELTA}G
        else
          echo "VM $VMID: scsi1 actual ${CUR}G >= deseado ${DES}G, no cambio."
        fi
      args: { executable: /bin/bash }
      when: item.value.data_disk_gb is defined
      loop: "{{ vmlist }}"
      loop_control: { label: "{{ item.key }}" }

    # --- Encender y esperar SSH ---
    - name: Arrancar VM
      community.proxmox.proxmox_kvm:
        api_host: "{{ pm_api_host }}"
        api_user: "{{ pm_api_user }}"
        api_token_id: "{{ pm_api_token_id }}"
        api_token_secret: "{{ pm_api_token_secret }}"
        validate_certs: "{{ validate_certs }}"
        node: "{{ pm_node }}"
        vmid: "{{ item.value.vmid }}"
        state: started
        timeout: 240
      loop: "{{ vmlist }}"
      loop_control: { label: "{{ item.key }}" }

    - name: Esperar a que SSH responda
      wait_for:
        host: "{{ (item.value.ip | string).split('/')[0] }}"
        port: 22
        delay: 5
        timeout: "{{ ssh_wait_timeout }}"
      loop: "{{ vmlist }}"
      loop_control: { label: "{{ item.key }}" }

    # --- Dentro del guest: limpieza ligera + crecer raíz (LVM/No-LVM) + /data ---
    - name: Crecer partición/FS de / y preparar /data dentro del guest
      shell: |
        set -eux

        # Limpieza mínima si hay poco espacio
        free0="$(df -Pm / | awk 'NR==2{print $4}')"
        if [ "${free0:-0}" -lt {{ min_free_mb }} ]; then
          systemctl stop docker 2>/dev/null || true
          systemctl stop containerd 2>/dev/null || true
          rm -f /var/lib/dpkg/lock-frontend /var/lib/dpkg/lock /var/cache/apt/archives/lock || true
          rm -rf /var/lib/apt/lists/* || true
          apt-get clean || true
          journalctl --vacuum-time=1d 2>/dev/null || true
          find /var/log -type f -size +10M -exec truncate -s 0 {} \; 2>/dev/null || true
          rm -rf /tmp/* /var/tmp/* 2>/dev/null || true
          dpkg --configure -a || true
        fi

        # Detectar raíz
        read ROOT_SOURCE ROOT_FSTYPE < <(findmnt -no SOURCE,FSTYPE /)
        ROOT_FSTYPE="$(echo "$ROOT_FSTYPE" | tr '[:upper:]' '[:lower:]')"

        if echo "$ROOT_SOURCE" | grep -q '^/dev/mapper/'; then
          # LVM
          pv="$(pvs --noheadings -o pv_name | awk 'NF{print $1; exit}')"
          if [ -n "$pv" ]; then pvresize "$pv" || true; fi
          lv_path="$(df -PTh | awk '$7=="/"{print $1}')"
          if echo "$lv_path" | grep -q '^/dev/'; then
            lvextend -r -l +100%FREE "$lv_path" || true
          fi
        else
          # NO-LVM
          PART_PATH="$ROOT_SOURCE"
          DISK_PATH="$(echo "$PART_PATH" | sed -E 's/[0-9]+$//')"
          PART_NUM="$(echo "$PART_PATH" | sed -nE 's/.*([0-9]+)$/\1/p')"
          command -v growpart >/dev/null 2>&1 || (apt-get update -o Acquire::ForceIPv4=true && DEBIAN_FRONTEND=noninteractive apt-get install -y cloud-guest-utils)
          growpart "$DISK_PATH" "$PART_NUM" || true
          if [ "$ROOT_FSTYPE" = "xfs" ]; then
            xfs_growfs /
          else
            resize2fs "$PART_PATH" || true
          fi
        fi

        # /data si existe sdb
        if lsblk -no NAME | grep -q '^sdb$'; then
          blkid -L DATA >/dev/null 2>&1 || mkfs.ext4 -F -L DATA /dev/sdb
          mkdir -p /data
          grep -q '^LABEL=DATA ' /etc/fstab || echo 'LABEL=DATA /data ext4 defaults,nofail 0 2' >> /etc/fstab
          mount -a || true
        fi
      args: { executable: /bin/bash }
      vars:
        ansible_user: "{{ ci_user }}"
      delegate_to: "{{ (item.value.ip | string).split('/')[0] }}"
      become: true
      loop: "{{ vmlist }}"
      loop_control: { label: "{{ item.key }}" }