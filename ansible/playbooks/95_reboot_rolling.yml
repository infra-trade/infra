---
# Reboot controlado, uno por uno, con espera de reconexión
- name: Rolling reboot (uno por uno)
  hosts: all
  gather_facts: false
  serial: 1          # cambia a 2/3 si quieres lotes
  become: true

  vars:
    reboot_msg: "Maintenance reboot via Ansible"
    reboot_timeout: 900        # seg. para esperar que suba
    connect_timeout: 30
    pre_reboot_delay: 0
    post_reboot_delay: 10
    test_command: "whoami"     # simple verificación post-boot

  tasks:
    - name: Reboot host y esperar reconexión
      ansible.builtin.reboot:
        msg: "{{ reboot_msg }}"
        reboot_timeout: "{{ reboot_timeout }}"
        connect_timeout: "{{ connect_timeout }}"
        pre_reboot_delay: "{{ pre_reboot_delay }}"
        post_reboot_delay: "{{ post_reboot_delay }}"
        test_command: "{{ test_command }}"

    - name: Mostrar uptime después del reboot
      ansible.builtin.command: uptime
      register: _uptime

    - name: Uptime
      ansible.builtin.debug:
        var: _uptime.stdout