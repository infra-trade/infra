---
# Normaliza campos antes de validar
- name: Normalize fields for stack {{ st.name }}
  ansible.builtin.set_fact:
    _file_path: "{{ st.file_path | default(st.compose_path | default('')) }}"
    _git_ref: "{{ st.git_ref | default('main') }}"
    _env_vars: "{{ st.env | default([]) }}"
    _endpoint: "{{ st.endpoint | default('') }}"
    _endpoint_id: "{{ st.endpoint_id | default('') }}"

- name: Validate required fields for stack {{ st.name }}
  ansible.builtin.assert:
    that:
      - st.name is defined
      - st.repo_url is defined
      - _file_path | length > 0
    fail_msg: "Faltan campos en stack {{ st | to_nice_json }}"

- name: Resolve endpointId for {{ st.name }}
  ansible.builtin.set_fact:
    _endpoint_id_resolved: >-
      {%- if _endpoint_id | string | length > 0 -%}
        {{ _endpoint_id }}
      {%- elif _endpoint | string | length > 0 -%}
        {%- set e = _endpoint -%}
        {%- set alias = alias_map.get(e, e) -%}
        {{ endpoints_by_name_map.get(alias) | default(endpoints_by_name_map.get(e)) | default('') }}
      {%- else -%}
        {{ endpoints_by_name_map.get('local') | default('') }}
      {%- endif -%}

- name: Fail if endpoint cannot be resolved for {{ st.name }}
  ansible.builtin.assert:
    that: _endpoint_id_resolved | string | length > 0
    fail_msg: "No se pudo resolver endpointId para stack {{ st.name }} (endpoint='{{ _endpoint }}')."

# ----- Buscar stack existente -----
- name: Fetch stacks list
  ansible.builtin.uri:
    url: "{{ portainer_url }}/api/stacks"
    method: GET
    headers:
      X-API-Key: "{{ portainer_api_token }}"
    validate_certs: "{{ portainer_validate_certs }}"
    status_code: 200
    return_content: true
  register: _stacks

- name: Find existing stack id by name (exact match)
  ansible.builtin.set_fact:
    _existing_stack: "{{ (_stacks.json | selectattr('Name','equalto', st.name) | list | first) | default(None) }}"
    _existing_stack_id: "{{ ((_stacks.json | selectattr('Name','equalto', st.name) | list | first).Id) | default(None) }}"

# ----- Crear si no existe -----
- name: Create stack {{ st.name }} from repository (compose/standalone)
  when: _existing_stack_id is not defined
  ansible.builtin.uri:
    url: "{{ portainer_url }}/api/stacks/create?type=2&method=repository&endpointId={{ _endpoint_id_resolved }}"
    method: POST
    headers:
      X-API-Key: "{{ portainer_api_token }}"
      Content-Type: "application/json"
    validate_certs: "{{ portainer_validate_certs }}"
    status_code: 200, 201
    body_format: json
    body:
      Name: "{{ st.name }}"
      RepositoryURL: "{{ st.repo_url }}"
      RepositoryReferenceName: "{{ _git_ref }}"
      ComposeFilePathInRepository: "{{ _file_path }}"
      Env: "{{ _env_vars }}"
      Prune: "{{ st.prune | default(true) }}"
  register: _create

# ----- Update + redeploy si existe -----
- name: Update git reference / file path (optional) on existing stack {{ st.name }}
  when: _existing_stack_id is defined and (_git_ref is defined or _file_path is defined)
  ansible.builtin.uri:
    url: "{{ portainer_url }}/api/stacks/{{ _existing_stack_id }}"
    method: PUT
    headers:
      X-API-Key: "{{ portainer_api_token }}"
      Content-Type: "application/json"
    validate_certs: "{{ portainer_validate_certs }}"
    status_code: 200
    body_format: json
    body:
      RepositoryReferenceName: "{{ _git_ref }}"
      ComposeFilePathInRepository: "{{ _file_path }}"
  register: _update
  failed_when: false

- name: Git redeploy (pull & prune) existing stack {{ st.name }}
  when: _existing_stack_id is defined
  ansible.builtin.uri:
    url: "{{ portainer_url }}/api/stacks/{{ _existing_stack_id }}/git/redeploy?endpointId={{ _endpoint_id_resolved }}"
    method: POST
    headers:
      X-API-Key: "{{ portainer_api_token }}"
      Content-Type: "application/json"
    validate_certs: "{{ portainer_validate_certs }}"
    status_code: 200
    body_format: json
    body:
      Prune: "{{ st.prune | default(true) }}"
      PullImage: true
      Env: "{{ _env_vars }}"
  register: _redeploy