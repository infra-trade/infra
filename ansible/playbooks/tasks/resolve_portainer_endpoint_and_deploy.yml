---
# playbooks/tasks/resolve_portainer_endpoint_and_deploy.yml

############################################################
# 0) Resolver el objeto de stack para este item (robusto)
############################################################
- name: Normalizar colecciones de stacks (mapa y lista)
  set_fact:
    _stacks_map: "{{ (stacks_effective | default({})) if (stacks_effective is mapping) else {} }}"
    _stacks_seq: "{{ (stacks_effective | default([]))  if (stacks_effective is sequence) else [] }}"

- name: Resolver coincidencia por nombre en la lista (si aplica)
  set_fact:
    _seq_match: >-
      {{
        (_stacks_seq
          | selectattr('name','defined')
          | selectattr('name','equalto', item)
          | list)
        if (_stacks_seq | length) > 0 else []
      }}

- name: Resolve current stack object to _it
  set_fact:
    _it: >-
      {{
        _stacks_map[item]
          if (_stacks_map is mapping and (item in _stacks_map))
        else
          (
            _seq_match[0]
              if (_seq_match | length) > 0
            else
              (item if (item is mapping) else {})
          )
      }}

- name: Ensure _it is a valid stack object
  assert:
    that:
      - _it is mapping
      - (_it.name | default('')) | length > 0
    success_msg: "All assertions passed"
    fail_msg: >
      No encontré definición para el item '{{ item }}' en 'stacks_effective'.
      Define un objeto con 'name' en stacks_effective (mapa o lista).
      Pistas:
      - keys del mapa: {{ _stacks_map.keys() | default([]) }}
      - nombres en la lista: {{ (_stacks_seq | map(attribute='name') | list) | default([]) }}

############################################################
# 1) Headers de autenticación (API Key o JWT)
############################################################
- name: Build Portainer auth headers
  set_fact:
    _portainer_auth_headers: >-
      {{
        {'X-API-Key': portainer_api_token}
        if (portainer_use_api_key | default(true)) | bool
        else {'Authorization': 'Bearer ' ~ portainer_api_token}
      }}

- name: Validate token presence
  assert:
    that:
      - (portainer_api_token | string | length) > 0
    success_msg: "All assertions passed"
    fail_msg: "portainer_api_token vacío. Define la API Key o el JWT."

############################################################
# 2) Normalizar/validar campos del stack
############################################################
- name: Normalize fields
  set_fact:
    _name: "{{ _it.name | default(_it.Name) | default('') }}"
    _endpoint: "{{ _it.endpoint | default(_it.Endpoint) | default('') }}"
    _repo_url: "{{ _it.repo_url | default(_it.RepositoryURL) | default('') }}"
    _compose_path: "{{ _it.compose_path | default(_it.StackFilePath) | default('') }}"
    _git_ref: "{{ _it.git_ref | default(_it.RepositoryReferenceName) | default('main') }}"
    _env: "{{ _it.env | default(_it.Env) | default([]) }}"

- name: Validate required fields
  assert:
    that:
      - _name | length > 0
      - _repo_url | length > 0
      - _compose_path | length > 0
      - _git_ref | length > 0
    success_msg: "All assertions passed"
    fail_msg: "Faltan campos requeridos (_name, _repo_url, _compose_path, _git_ref)."

############################################################
# 3) Resolver endpointId (con alias si hace falta)
############################################################
- name: Build endpoints_by_name_map if missing
  set_fact:
    endpoints_by_name_map: >-
      {{
        endpoints_by_name_map
          if (endpoints_by_name_map is defined)
        else
          (dict(endpoints_list | map(attribute='Name') | zip(endpoints_list | map(attribute='Id'))))
      }}

- name: Build default alias map and merge with provided alias_map
  set_fact:
    _alias_map: >-
      {{
        {'airflow':'airflow-core',
         'kafka':'kafka-core',
         'spark':'spark-core',
         'db':'db-core',
         'mon':'local'}
        | combine(alias_map | default({}))
      }}

- name: Resolve endpointId
  set_fact:
    _endpoint_id: >-
      {%- set e = (_endpoint | string) -%}
      {%- if e | length == 0 -%}
        {{ endpoints_by_name_map.get('local') | default('') }}
      {%- else -%}
        {%- set alias = _alias_map.get(e, e) -%}
        {{ endpoints_by_name_map.get(alias) | default(endpoints_by_name_map.get(e)) | default('') }}
      {%- endif -%}

- name: Fail if endpoint cannot be resolved
  assert:
    that:
      - (_endpoint_id | string | length) > 0
    success_msg: "All assertions passed"
    fail_msg: "No se pudo resolver endpointId para endpoint='{{ _endpoint }}'. Revisa endpoints_list/alias_map."

############################################################
# 4) Leer stacks existentes
############################################################
- name: Fetch stacks list
  uri:
    url: "{{ portainer_url_effective }}/api/stacks"
    method: GET
    validate_certs: false
    headers: "{{ _portainer_auth_headers }}"
    status_code: [200, 401]
  register: _stacks_list

- name: Fail if unauthorized (bad/expired token or wrong header type)
  fail:
    msg: "Portainer devolvió 401 Unauthorized. Verifica tu token o header. Detalle: {{ _stacks_list.json | default({}) }}"
  when: _stacks_list.status == 401

- name: Find existing stack id by name (exact match)
  set_fact:
    _existing_stack_id: >-
      {{
        (
          (_stacks_list.json | default([]))
          | selectattr('Name','equalto', _name)
          | list
        ) | length > 0
          | ternary(
              ((_stacks_list.json | default([]))
               | selectattr('Name','equalto', _name)
               | list)[0].Id,
              ''
            )
      }}

############################################################
# 5) Definir URLs de creación (hybrid + legacy)
############################################################
- name: Define create URLs (hybrid + legacy)
  set_fact:
    _create_url_repo_new:      "{{ portainer_url_effective }}/api/stacks/create?type=2&method=repository&endpointId={{ _endpoint_id }}"
    _create_url_string_new:    "{{ portainer_url_effective }}/api/stacks/create?type=2&method=string&endpointId={{ _endpoint_id }}"
    _create_url_repo_legacy:   "{{ portainer_url_effective }}/api/stacks?type=2&method=repository&endpointId={{ _endpoint_id }}"
    _create_url_string_legacy: "{{ portainer_url_effective }}/api/stacks?type=2&method=string&endpointId={{ _endpoint_id }}"

- name: Debug create URLs to auditar
  debug:
    msg:
      repo_legacy: "{{ _create_url_repo_legacy }}"
      repo_new: "{{ _create_url_repo_new }}"
      string_legacy: "{{ _create_url_string_legacy }}"
      string_new: "{{ _create_url_string_new }}"

############################################################
# 6) Intento de creación desde REPO (NEW; LEGACY solo si NEW==404)
############################################################
- name: Try create stack {{ _name }} from repository (NEW path)
  uri:
    url: "{{ _create_url_repo_new }}"
    method: POST
    validate_certs: false
    headers: "{{ _portainer_auth_headers }}"
    body_format: json
    body:
      Name: "{{ _name }}"
      StackFilePath: "{{ _compose_path }}"
      RepositoryURL: "{{ _repo_url }}"
      RepositoryReferenceName: "{{ _git_ref }}"
      ComposeFormat: 2
      Env: "{{ _env }}"
    status_code: [200, 201, 409, 405, 404]
  register: _create_repo_new
  when: _existing_stack_id | string | length == 0

- name: Try create stack {{ _name }} from repository (LEGACY path if NEW returned 404)
  uri:
    url: "{{ _create_url_repo_legacy }}"
    method: POST
    validate_certs: false
    headers: "{{ _portainer_auth_headers }}"
    body_format: json
    body:
      Name: "{{ _name }}"
      StackFilePath: "{{ _compose_path }}"
      RepositoryURL: "{{ _repo_url }}"
      RepositoryReferenceName: "{{ _git_ref }}"
      ComposeFormat: 2
      Env: "{{ _env }}"
    status_code: [200, 201, 409, 405]
  register: _create_repo_legacy
  failed_when: false
  when:
    - _existing_stack_id | string | length == 0
    - (_create_repo_new.status | default(0)) == 404

############################################################
# 7) ¿Necesitamos fallback a STRING?
############################################################
- name: Need fallback to string?
  set_fact:
    _need_string_fallback: >-
      {{
        _existing_stack_id | string | length == 0 and
        (
          (_create_repo_new.status | default(0)) in [405, 404]
          or (_create_repo_new is not defined)
        )
      }}

############################################################
# 8) Fallback a STRING (NEW; LEGACY solo si NEW==404)
############################################################
- name: Create unique temp dir for {{ _name }} (fallback)
  tempfile:
    state: directory
    prefix: ans_port_{{ _name }}_
  register: _tmpdir
  delegate_to: localhost
  when: _need_string_fallback

- name: Clone repo for {{ _name }} (fallback create via string, idempotent)
  git:
    repo: "{{ _repo_url }}"
    dest: "{{ _tmpdir.path }}"
    version: "{{ _git_ref }}"
    accept_hostkey: true
    force: true
  delegate_to: localhost
  when: _need_string_fallback

- name: Read compose file content (fallback)
  slurp:
    src: "{{ _tmpdir.path }}/{{ _compose_path }}"
  register: _compose_slurp
  delegate_to: localhost
  when: _need_string_fallback

- name: Create stack {{ _name }} via method=string (NEW path)
  uri:
    url: "{{ _create_url_string_new }}"
    method: POST
    validate_certs: false
    headers: "{{ _portainer_auth_headers }}"
    body_format: json
    body:
      Name: "{{ _name }}"
      StackFileContent: "{{ (_compose_slurp.content | b64decode) }}"
      ComposeFormat: 2
      Env: "{{ _env }}"
    status_code: [200, 201, 409, 405, 404]
  register: _create_string_new
  when: _need_string_fallback

- name: Create stack {{ _name }} via method=string (LEGACY path if NEW returned 404)
  uri:
    url: "{{ _create_url_string_legacy }}"
    method: POST
    validate_certs: false
    headers: "{{ _portainer_auth_headers }}"
    body_format: json
    body:
      Name: "{{ _name }}"
      StackFileContent: "{{ (_compose_slurp.content | b64decode) }}"
      ComposeFormat: 2
      Env: "{{ _env }}"
    status_code: [200, 201, 409, 405]
  register: _create_string_legacy
  failed_when: false
  when:
    - _need_string_fallback
    - (_create_string_new.status | default(0)) == 404

- name: Cleanup temp dir
  file:
    path: "{{ _tmpdir.path }}"
    state: absent
  delegate_to: localhost
  when: _need_string_fallback

############################################################
# 9) (Opcional) Lógica de update/redeploy si _existing_stack_id existe
############################################################