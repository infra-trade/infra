---
# Espera las vars:
#   st: { name, repo_url, git_ref, file_path, endpoint | endpoint_id, env, prune }
#   portainer_url, portainer_api_token, portainer_validate_certs
#   endpoints_by_name, endpoint_aliases_effective

- name: Validate required fields for stack {{ st.name }}
  ansible.builtin.assert:
    that:
      - st.name is defined
      - st.repo_url is defined
      - st.file_path is defined
    fail_msg: "Faltan campos en stack {{ st | to_nice_json }}"

- name: Resolve endpointId for {{ st.name }}
  ansible.builtin.set_fact:
    _endpoint_id_resolved: >-
      {%- if st.endpoint_id is defined -%}
      {{ st.endpoint_id }}
      {%- elif st.endpoint is defined -%}
        {%- set e = st.endpoint -%}
        {%- set alias = endpoint_aliases_effective.get(e, e) -%}
        {{ endpoints_by_name.get(alias) | default(endpoints_by_name.get(e)) | default('') }}
      {%- else -%}
      {{ endpoints_by_name.get('local') | default('') }}
      {%- endif -%}

- name: Fail if endpoint cannot be resolved for {{ st.name }}
  ansible.builtin.assert:
    that: _endpoint_id_resolved | string | length > 0
    fail_msg: "No se pudo resolver endpointId para stack {{ st.name }} (endpoint='{{ st.endpoint | default('') }}')."

# --------------------- Buscar si el stack ya existe ---------------------
- name: Fetch stacks list
  ansible.builtin.uri:
    url: "{{ portainer_url }}/api/stacks"
    method: GET
    headers: { X-API-Key: "{{ portainer_api_token }}" }
    validate_certs: "{{ portainer_validate_certs }}"
    status_code: 200
    return_content: true
  register: _stacks

- name: Find existing stack id by name (exact match)
  ansible.builtin.set_fact:
    _existing_stack: "{{ (_stacks.json | selectattr('Name','equalto', st.name) | list | first) | default(None) }}"
    _existing_stack_id: "{{ ((_stacks.json | selectattr('Name','equalto', st.name) | list | first).Id) | default(None) }}"

# --------------------- Crear si no existe ---------------------
- name: Create stack {{ st.name }} from repository (compose/standalone)
  when: _existing_stack_id is not defined
  ansible.builtin.uri:
    url: "{{ portainer_url }}/api/stacks/create?type=2&method=repository&endpointId={{ _endpoint_id_resolved }}"
    method: POST
    headers:
      X-API-Key: "{{ portainer_api_token }}"
      Content-Type: "application/json"
    validate_certs: "{{ portainer_validate_certs }}"
    status_code: 200, 201
    body_format: json
    body:
      Name: "{{ st.name }}"
      RepositoryURL: "{{ st.repo_url }}"
      RepositoryReferenceName: "{{ st.git_ref | default('main') }}"
      ComposeFilePathInRepository: "{{ st.file_path }}"
      Env: "{{ st.env | default([]) }}"
      Prune: "{{ st.prune | default(true) }}"
      # Si usas Git privado vía SSH, puedes añadir:
      # RepositoryAuthentication: true
      # RepositoryGitCredentialID: 0
      # RepositoryPassword: "{{ lookup('env','PORTAINER_PRIVATE_KEY') | default(omit) }}"
  register: _create

# --------------------- Redeploy si existe (pull + prune) ---------------------
- name: Update git reference (optional) on existing stack {{ st.name }}
  when: _existing_stack_id is defined and (st.git_ref is defined or st.file_path is defined)
  ansible.builtin.uri:
    url: "{{ portainer_url }}/api/stacks/{{ _existing_stack_id }}"
    method: PUT
    headers:
      X-API-Key: "{{ portainer_api_token }}"
      Content-Type: "application/json"
    validate_certs: "{{ portainer_validate_certs }}"
    status_code: 200
    body_format: json
    body:
      # Partial update: solo campos relevantes
      RepositoryReferenceName: "{{ st.git_ref | default(omit) }}"
      ComposeFilePathInRepository: "{{ st.file_path | default(omit) }}"
  register: _update
  failed_when: false

- name: Git redeploy (pull & prune) existing stack {{ st.name }}
  when: _existing_stack_id is defined
  ansible.builtin.uri:
    url: "{{ portainer_url }}/api/stacks/{{ _existing_stack_id }}/git/redeploy?endpointId={{ _endpoint_id_resolved }}"
    method: POST
    headers:
      X-API-Key: "{{ portainer_api_token }}"
      Content-Type: "application/json"
    validate_certs: "{{ portainer_validate_certs }}"
    status_code: 200
    body_format: json
    body:
      Prune: "{{ st.prune | default(true) }}"
      PullImage: true
      Env: "{{ st.env | default([]) }}"
  register: _redeploy