---
# Requiere vars del item: st.name, st.endpoint, st.repo_url, st.compose_path, st.git_ref, st.env
# Requiere vars del play: portainer_url, portainer_api_token, endpoints (mapa), portainer_validate_certs
# Opcional (para repo privado por SSH): github_deploy_key -> ruta a key (p.ej. /home/ansible/.ssh/id_ed25519)

- name: Resolver endpointId para {{ st.name }}
  ansible.builtin.set_fact:
    _endpoint_id: "{{ (endpoints[st.endpoint] | default(omit)) | int }}"

- name: Validar endpointId mapeado
  ansible.builtin.assert:
    that:
      - _endpoint_id is defined
    fail_msg: "No encuentro endpointId para '{{ st.endpoint }}' en 'endpoints: {}'"
    success_msg: "endpointId = {{ _endpoint_id }}"

# === 1) Preparar compose: clonar y leer contenido (en el controlador) ===
- name: Clonar repo {{ st.repo_url }} ({{ st.git_ref | default('main') }}) localmente
  ansible.builtin.git:
    repo: "{{ st.repo_url }}"
    dest: "/tmp/portainer_repos/{{ st.name }}"
    version: "{{ st.git_ref | default('main') }}"
    accept_hostkey: true
    key_file: "{{ github_deploy_key | default(omit) }}"
    update: true
    force: true
  delegate_to: localhost
  run_once: true

- name: Verificar archivo compose existe
  ansible.builtin.stat:
    path: "/tmp/portainer_repos/{{ st.name }}/{{ st.compose_path }}"
  register: _compose_stat
  delegate_to: localhost
  run_once: true

- name: Fallar si no existe el compose
  ansible.builtin.fail:
    msg: "No se encuentra el compose en {{ st.compose_path }} para stack {{ st.name }}"
  when: not _compose_stat.stat.exists
  delegate_to: localhost
  run_once: true

- name: Leer contenido del compose
  ansible.builtin.slurp:
    path: "/tmp/portainer_repos/{{ st.name }}/{{ st.compose_path }}"
  register: _compose_b64
  delegate_to: localhost
  run_once: true

- name: Guardar contenido compose decodificado
  ansible.builtin.set_fact:
    _compose_content: "{{ _compose_b64.content | b64decode }}"

# === 2) Descubrir si el stack existe ===
- name: Listar stacks existentes (Portainer)
  ansible.builtin.uri:
    url: "{{ portainer_url }}/api/stacks"
    method: GET
    headers:
      X-API-Key: "{{ portainer_api_token }}"
    validate_certs: "{{ portainer_validate_certs }}"
    return_content: true
    status_code: 200
  register: _stacks_list

- name: Calcular lista de coincidencias
  ansible.builtin.set_fact:
    _matches: >-
      {{
        _stacks_list.json
        | selectattr('Name','equalto', st.name)
        | selectattr('EndpointId','equalto', (_endpoint_id | int))
        | list
      }}

- name: Derivar flags de existencia y stack existente
  ansible.builtin.set_fact:
    _exists: "{{ (_matches | length) > 0 }}"
    _existing_stack: "{{ _matches[0] if ((_matches | length) > 0) else omit }}"

- name: Debug match
  ansible.builtin.debug:
    msg:
      - "Stack '{{ st.name }}' en endpoint {{ _endpoint_id }} => {{ 'EXISTE' if _exists else 'NO EXISTE' }}"

# === 3) Si existe: borrar (CE API file-mode no soporta update directo fiable) ===
- name: Borrar stack existente (si aplica)
  ansible.builtin.uri:
    url: "{{ portainer_url }}/api/stacks/{{ _existing_stack.Id }}?endpointId={{ _endpoint_id }}"
    method: DELETE
    headers:
      X-API-Key: "{{ portainer_api_token }}"
    validate_certs: "{{ portainer_validate_certs }}"
    status_code: 204
  when: _exists
  register: _delete_resp
  changed_when: _exists

# === 4) Crear stack con contenido de compose (método FILE/STRING vía endpoint JSON) ===
# Usamos el endpoint "create compose" que acepta JSON con stackFileContent (evita multipart).
- name: Crear stack desde contenido de compose
  ansible.builtin.uri:
    url: "{{ portainer_url }}/api/stacks/create/compose?type=2&endpointId={{ _endpoint_id }}"
    method: POST
    headers:
      X-API-Key: "{{ portainer_api_token }}"
      Content-Type: "application/json"
    validate_certs: "{{ portainer_validate_certs }}"
    body_format: json
    body:
      name: "{{ st.name }}"
      stackFileContent: "{{ _compose_content }}"
      prune: true
      pullImage: true
      env: "{{ st.env | default([]) }}"
    status_code: [200, 201]
  register: _create_resp
  changed_when: true
