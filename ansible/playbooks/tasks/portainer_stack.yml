---
# Taskfile incluido por 36_portainer_git_stacks.yml
# Requiere variables:
#   - st: {name, endpoint, repo_url, compose_path, git_ref?, env?}
#   - portainer_url, portainer_api_token
#   - endpoints: mapa nombre->endpointId (definido en group_vars/all.yml)
#   - github_username, github_pat (Vault) para repos privados

- name: Resolver endpointId para {{ st.name }}
  ansible.builtin.set_fact:
    _endpoint_id: "{{ endpoints[st.endpoint] | default(omit) }}"

- name: Validar endpointId mapeado
  ansible.builtin.assert:
    that:
      - _endpoint_id is defined
    fail_msg: "No encuentro endpointId para '{{ st.endpoint }}' en 'endpoints:'"
    success_msg: "endpointId = {{ _endpoint_id }}"

# 1) Listar stacks existentes y buscar uno por nombre+endpoint
- name: Listar stacks existentes (Portainer)
  ansible.builtin.uri:
    url: "{{ portainer_url }}/api/stacks"
    method: GET
    headers:
      Authorization: "Bearer {{ portainer_api_token }}"
    validate_certs: false
    return_content: true
    status_code: 200
  register: _stacks_list

- name: Calcular lista de coincidencias
  ansible.builtin.set_fact:
    _matches: >-
      {{ _stacks_list.json
         | selectattr('Name','equalto', st.name)
         | selectattr('EndpointId','equalto', (_endpoint_id | int))
         | list }}

- name: Derivar flags de existencia y stack existente
  ansible.builtin.set_fact:
    _exists: "{{ (_matches | length) > 0 }}"
    _existing_stack: "{{ (_matches | first) | default(None) }}"

- name: Debug match
  ansible.builtin.debug:
    msg:
      - "Stack '{{ st.name }}' en endpoint {{ _endpoint_id }} => {{ 'EXISTE' if _exists else 'NO EXISTE' }}"
  when: (ansible_verbosity | int) > 0

# 2) Crear si no existe: CE 2.33.2 (standalone) desde repo PRIVADO (HTTPS + PAT)
- name: Crear stack (si NO existe) [CE 2.33 standalone/repository]
  no_log: true
  ansible.builtin.uri:
    url: "{{ portainer_url }}/api/stacks/create/standalone/repository?endpointId={{ _endpoint_id }}"
    method: POST
    headers:
      Authorization: "Bearer {{ portainer_api_token }}"
      Content-Type: "application/json"
    validate_certs: false
    body_format: json
    body:
      Name: "{{ st.name }}"
      RepositoryURL: "{{ st.repo_url }}"
      RepositoryReferenceName: "{{ st.git_ref | default(git_default_ref | default('main')) }}"
      ComposeFilePathInRepository: "{{ st.compose_path }}"
      RepositoryAuthentication: true
      RepositoryUsername: "{{ github_username }}"
      RepositoryPassword: "{{ github_pat }}"
      Env: "{{ st.env | default([]) }}"
    status_code: [200, 201]
  register: _create_resp
  when: not _exists
  changed_when: true

# 3) Actualizar si existe: PUT /api/stacks/{id}
- name: Actualizar stack (si EXISTE)
  no_log: true
  ansible.builtin.uri:
    url: "{{ portainer_url }}/api/stacks/{{ _existing_stack.Id }}?endpointId={{ _endpoint_id }}"
    method: PUT
    headers:
      Authorization: "Bearer {{ portainer_api_token }}"
      Content-Type: "application/json"
    validate_certs: false
    body_format: json
    body:
      Prune: true
      PullImage: true
      RepositoryAuthentication: true
      RepositoryUsername: "{{ github_username }}"
      RepositoryPassword: "{{ github_pat }}"
      RepositoryReferenceName: "{{ st.git_ref | default(git_default_ref | default('main')) }}"
      Env: "{{ st.env | default([]) }}"
    status_code: 200
  register: _update_resp
  when: _exists
  changed_when: true