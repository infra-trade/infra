---
# Requiere vars:
# - portainer_url
# - portainer_api_token (Access Token, usar en header X-API-Key)
# - endpoints: mapa nombre->Id (ej: { mon: 2, airflow: 3, ... })
# - st: { name, endpoint, repo_url, compose_path, git_ref, env }

- name: Resolver endpointId para {{ st.name }}
  ansible.builtin.set_fact:
    _endpoint_id: "{{ endpoints[st.endpoint] | default(omit) }}"

- name: Validar endpointId mapeado
  ansible.builtin.assert:
    that:
      - _endpoint_id is defined
    fail_msg: "No encuentro endpointId para '{{ st.endpoint }}' en 'endpoints: {}'"
    success_msg: "endpointId = {{ _endpoint_id }}"

# 1) Listar stacks y buscar por nombre + endpointId
- name: Listar stacks existentes (Portainer)
  ansible.builtin.uri:
    url: "{{ portainer_url }}/api/stacks"
    method: GET
    headers:
      X-API-Key: "{{ portainer_api_token }}"
    validate_certs: false
    return_content: true
    status_code: 200
  register: _stacks_list

- name: Calcular lista de coincidencias
  ansible.builtin.set_fact:
    _matches: >-
      {{
        _stacks_list.json
        | selectattr('Name','equalto', st.name)
        | selectattr('EndpointId','equalto', _endpoint_id)
        | list
      }}

- name: Derivar flags de existencia y stack existente
  ansible.builtin.set_fact:
    _exists: "{{ (_matches | length) > 0 }}"
    _existing: "{{ (_matches | length) > 0 | ternary(_matches[0], omit) }}"

- name: Debug match
  ansible.builtin.debug:
    msg:
      - "Stack '{{ st.name }}' en endpoint {{ _endpoint_id }} => {{ 'EXISTE' if _exists else 'NO EXISTE' }}"

# 2) Crear si no existe (type=2 compose, method=repository desde Git)*
# *En CE 2.33.2 la API acepta repository para stacks de compose. Si el servidor devolviera 405,
#  esa instancia no permite creaci√≥n desde Git por API: en tal caso usa 35_deploy_stacks_compose.yml.
- name: Crear stack (si NO existe)
  ansible.builtin.uri:
    url: "{{ portainer_url }}/api/stacks?type=2&method=repository&endpointId={{ _endpoint_id }}"
    method: POST
    headers:
      X-API-Key: "{{ portainer_api_token }}"
      Content-Type: "application/json"
    validate_certs: false
    body_format: json
    body:
      Name: "{{ st.name }}"
      RepositoryURL: "{{ st.repo_url }}"
      RepositoryReferenceName: "{{ st.git_ref | default('main') }}"
      ComposeFilePathInRepository: "{{ st.compose_path }}"
      # Para repo privado con usuario/clave PAT, descomenta e incluye credenciales:
      # RepositoryAuthentication: true
      # RepositoryUsername: "{{ git_user }}"
      # RepositoryPassword: "{{ git_token }}"
      RepositoryAuthentication: false
      Env: "{{ st.env | default([]) }}"
    status_code: [200, 201]
  register: _create_resp
  when: not _exists
  changed_when: true

# 3) Actualizar si existe (pull + redeploy)
- name: Actualizar stack (si EXISTE)
  ansible.builtin.uri:
    url: "{{ portainer_url }}/api/stacks/{{ _existing.Id }}?endpointId={{ _endpoint_id }}"
    method: PUT
    headers:
      X-API-Key: "{{ portainer_api_token }}"
      Content-Type: "application/json"
    validate_certs: false
    body_format: json
    body:
      Prune: true
      PullImage: true
      # Para repo privado:
      # RepositoryAuthentication: true
      # RepositoryUsername: "{{ git_user }}"
      # RepositoryPassword: "{{ git_token }}"
      RepositoryAuthentication: false
      RepositoryReferenceName: "{{ st.git_ref | default('main') }}"
      Env: "{{ st.env | default([]) }}"
    status_code: 200
  register: _update_resp
  when: _exists
  changed_when: true