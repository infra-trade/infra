---
# Requiere variables del item: st.name, st.endpoint, st.repo_url, st.compose_path, st.git_ref, st.env
# Requiere vars del play: portainer_url, portainer_api_token, endpoints (mapa)

- name: Resolver endpointId para {{ st.name }}
  ansible.builtin.set_fact:
    _endpoint_id: "{{ endpoints[st.endpoint] | default(omit) }}"

- name: Validar endpointId mapeado
  ansible.builtin.assert:
    that:
      - _endpoint_id is defined
    fail_msg: "No encuentro endpointId para '{{ st.endpoint }}' en 'endpoints: {}'"
    success_msg: "endpointId = {{ _endpoint_id }}"

# 1) Listar stacks existentes y buscar uno por nombre+endpoint
- name: Listar stacks existentes (Portainer)
  ansible.builtin.uri:
    url: "{{ portainer_url }}/api/stacks"
    method: GET
    headers:
      Authorization: "Bearer {{ portainer_api_token }}"
    validate_certs: false
    return_content: true
    status_code: 200
  register: _stacks_list

- name: Buscar stack objetivo en respuesta
  ansible.builtin.set_fact:
    _existing_stack: >-
      {{
        (_stacks_list.json | selectattr('Name','equalto', st.name)
                           | selectattr('EndpointId','equalto', _endpoint_id)
                           | list | first) | default(None)
      }}

- name: Debug match
  ansible.builtin.debug:
    msg:
      - "Stack '{{ st.name }}' en endpoint {{ _endpoint_id }} => {{ 'EXISTE' if _existing_stack else 'NO EXISTE' }}"

# 2) Crear si no existe: type=2 (compose), method=repository (desde Git)
- name: Crear stack (si NO existe)
  ansible.builtin.uri:
    url: "{{ portainer_url }}/api/stacks?type=2&method=repository&endpointId={{ _endpoint_id }}"
    method: POST
    headers:
      Authorization: "Bearer {{ portainer_api_token }}"
      Content-Type: "application/json"
    validate_certs: false
    body_format: json
    body:
      Name: "{{ st.name }}"
      RepositoryURL: "{{ st.repo_url }}"
      RepositoryReferenceName: "{{ st.git_ref | default('main') }}"
      ComposeFilePathInRepository: "{{ st.compose_path }}"
      RepositoryAuthentication: false
      Env: "{{ st.env | default([]) }}"
    status_code: [200, 201]
  register: _create_resp
  when: _existing_stack is not defined or _existing_stack == None
  changed_when: true

# 3) Actualizar si existe: PUT /api/stacks/{id}?endpointId=...
- name: Actualizar stack (si EXISTE)
  ansible.builtin.uri:
    url: "{{ portainer_url }}/api/stacks/{{ _existing_stack.Id }}?endpointId={{ _endpoint_id }}"
    method: PUT
    headers:
      Authorization: "Bearer {{ portainer_api_token }}"
      Content-Type: "application/json"
    validate_certs: false
    body_format: json
    body:
      Prune: true
      PullImage: true
      RepositoryAuthentication: false
      RepositoryReferenceName: "{{ st.git_ref | default('main') }}"
      Env: "{{ st.env | default([]) }}"
    status_code: 200
  register: _update_resp
  when: _existing_stack is defined and _existing_stack != None
  changed_when: true